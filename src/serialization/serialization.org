#+TITLE: Serialisierung
#+AUTHOR: Dr. Günter Kolousek
#+DATE: \copy Dr. Günter Kolousek \hspace{12ex} [[http://creativecommons.org/licenses/by-nc-nd/4.0/][Creative Commons Namensnennung - Nicht kommerziell - Keine Bearbeitungen 4.0 International Lizenz]]

#+OPTIONS: H:1 toc:nil
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Execushares
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

#+LATEX_HEADER:\usepackage{pgfpages}
#+LATEX_HEADER:\usepackage{tikz}
#+LATEX_HEADER:\usetikzlibrary{shapes,arrows}
# +LATEX_HEADER:\pgfpagesuselayout{2 on 1}[a4paper,border shrink=5mm]u
# +LATEX: \mode<handout>{\setbeamercolor{background canvas}{bg=black!5}}
#+LATEX_HEADER:\usepackage{xspace}
#+LATEX: \newcommand{\cpp}{C++\xspace}

#+LATEX_HEADER: \newcommand{\N}{\ensuremath{\mathbb{N}}\xspace}
#+LATEX_HEADER: \newcommand{\R}{\ensuremath{\mathbb{R}}\xspace}
#+LATEX_HEADER: \newcommand{\Z}{\ensuremath{\mathbb{Z}}\xspace}
#+LATEX_HEADER: \newcommand{\Q}{\ensuremath{\mathbb{Q}}\xspace}
# +LATEX_HEADER: \renewcommand{\C}{\ensuremath{\mathbb{C}}\xspace}
#+LATEX_HEADER: \renewcommand{\P}{\ensuremath{\mathcal{P}}\xspace}
#+LATEX_HEADER: \newcommand{\sneg}[1]{\ensuremath{\overline{#1}}\xspace}
#+LATEX_HEADER: \renewcommand{\mod}{\mbox{ mod }}

#+LATEX_HEADER: \newcommand{\eps}{\ensuremath{\varepsilon}\xspace}
# +LATEX_HEADER: \newcommand{\sub}[1]{\textsubscript{#1}}
# +LATEX_HEADER: \newcommand{\super}[1]{\textsuperscript{#1}}
#+LATEX_HEADER: \newcommand{\union}{\ensuremath{\cup}}

#+LATEX_HEADER: \newcommand{\sseq}{\ensuremath{\subseteq}\xspace}

#+LATEX_HEADER: \usepackage{textcomp}
#+LATEX_HEADER: \usepackage{ucs}
#+LaTeX_HEADER: \usepackage{float}

# +LaTeX_HEADER: \shorthandoff{"}

#+LATEX_HEADER: \newcommand{\imp}{\ensuremath{\rightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\ar}{\ensuremath{\rightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\bicond}{\ensuremath{\leftrightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\biimp}{\ensuremath{\leftrightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\conj}{\ensuremath{\wedge}\xspace}
#+LATEX_HEADER: \newcommand{\disj}{\ensuremath{\vee}\xspace}
#+LATEX_HEADER: \newcommand{\anti}{\ensuremath{\underline{\vee}}\xspace}
#+LATEX_HEADER: \newcommand{\lnegx}{\ensuremath{\neg}\xspace}
#+LATEX_HEADER: \newcommand{\lequiv}{\ensuremath{\Leftrightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\limp}{\ensuremath{\Rightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\aR}{\ensuremath{\Rightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\lto}{\ensuremath{\leadsto}\xspace}

#+LATEX_HEADER: \renewcommand{\neg}{\ensuremath{\lnot}\xspace}

#+LATEX_HEADER: \newcommand{\eset}{\ensuremath{\emptyset}\xspace}

* Serialisierung
\vspace{1em}
- Serialisierung (engl. serialization)
  - Abbildung von strukturierten Daten auf sequenzielle Darstellungsform
  - Vorgang:
    - serialisierung (engl. serialization)
    - deserialisierung (engl. deserialization)
- Ziele
  - Persistenz: Abspeichern in Datei bzw. in Datenbank
  - Datenübertragung
- Marshalling
  - oft: ein Synonym zu Serialisierung
  - andererseits: teilweise wird explizit der Code (einer Klasse) mit
    einbezogen \to Objekt (mit Klasse) kann wieder hergestellt werden
    (unmarshalling, demarshalling)

* strukturierte Daten vs. Objekte
- strukturierte Daten
  - Zahlen (ganze Zahlen, Gleitkommazahlen, komplexe Zahlen)
  - boolscher Werte
  - einzelne Zeichen
  - Strings
  - Arrays
- Objekte, wie z.B. Java, C#, \cpp

* Serialisierungsformate
- zeichenbasierte Serialisierung
  - XML
  - JSON
  - YAML
  - eigens definiertes Format...
- binäre Serialisierung
  - binäres Format
  - MessagePack, Apache Thrift, protobuf, flatbuffers,...

* Serialisierung -- Text
\vspace{1em}
- XML
  - DOM-basiert (Baum): z.B. JAXP (Java API for XML Processing: DOM, SAX, StAX)
  - push-basiert: z.B. SAX (Java, JAXP, Python, \cpp,...)
  - pull-basiert: z.B. StAX (Streaming API for XML)
  - XPATH-basiert
  - Mapping auf Klassen: z.B. JAXB (Java Architecture for XML Binding)
- JSON
  - BSON ... Binary JSON, optimiert für schnelle Manipulation im Speicher
- YAML (YAML Ain't Markup Language)
  - Übermenge von JSON, kann als Stream gelesen/geschrieben

* Syntaxvergleich XML -- JSON -- YAML
\vspace{1.5em}
\scriptsize
#+begin_src XML
<persons>
  <person>
    <name>Maxi</name>
    <is_admin><true/></is_admin>
    <properties>
      <dict>
        <item>
          <key type="int">42</key>
          <value type="string">42</value>
        </item>
        <item>
          <key type="string">points</key>
          <value>
            <array>
              <element type="integer" value="23"/>
              <element type="integer" value="37"/>
              <element type="integer" value="619"/>
              <element type="integer" value="inf"/>
            </array>
          </value>
        </item>
      </dict>
    </properties>
  </person> ...
</persons>
#+end_src


* Syntaxvergl. XML -- JSON -- YAML -- 2
\scriptsize
#+begin_src javascript
[
  {
    "name" : "Maxi",
    "is_admin" : true,
    "properties" : {
      "42" : "42",
      "points" : [23, 37, 619, "inf"]
    }
  },
  ...
]
#+end_src

* Syntaxvergl. XML -- JSON -- YAML -- 3
\scriptsize
#+begin_src yaml
---
name: Maxi
is_admin: yes
properties:
  42 : "42"
  points:
  - 23
  - 37
  - 619
  - .inf
...
···
#+end_src

* Serialisierung -- binär
\vspace{1em}
- MessagePack
  - kein Schema, zero-copy
  - \cpp, Java, C#, Python, PHP, JavaScript,...
- Apache Thrift
  - ursprünglich Facebook, Schema (\to IDL), Schema-Evolution
    - dzt. eigene Weiterentwicklung von Facebook: =fbthrift=
  - implementiert in \cpp, Clients in \cpp, Java, C#, Python, PHP,...

* Serialisierung -- binär -- 2
- protobuf (Google)
  - Version: proto3
  - Schema, Schema-Evolution
  - Abgrenzung zu flatbuffers: \to distributed computing
  - \cpp, Java, C#, Python, Go, Ruby, Objective-C
- flatbuffers (Google)
  - Schema, Schema-Evolution
  - \to optimiert auf geringen Speicherbedarf, Zugriff ohne Parsing-Overhead, zero-copy
    - \to Games
  - \cpp, Java, C#, Python, PHP, JavaScript,...



