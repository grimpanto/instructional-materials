%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 307 214 489 396
%%HiResBoundingBox: 307.500000 214.000000 489.000000 395.500000
%%Creator: Tk Canvas Widget
%%For: Guenter Kolousek,,,
%%Title: Window .171225580
%%CreationDate: Tue Aug  9 18:51:16 2011
%%DocumentData: Clean7Bit
%%EndComments
% EPSF created by ps2eps 1.68
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def
50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $
% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).
/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def
/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def
/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def
% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.
/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end
    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.
    /Temporary exch definefont
} bind def
% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.
/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def
% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.
/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt
    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def
% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.
/StippleFill {
    % The following code is needed to work around a NeWSprint bug.
    /tmpstip 1 index def
    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale
    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.
    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll
    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position
    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y
	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def
% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.
/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.
/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def
    % First scan through all of the text to find the widest line.
    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall
    % Compute the baseline offset and the actual font height.
    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath
    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.
    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate
    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.
    justify lineLength mul baseline neg translate
    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.
    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.
	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def
%%EndProlog
%%BeginSetup
/CL 2 def
%%EndSetup
%%Page: 1 1
save
306.0 396.0 translate
0.7491 0.7491 scale
3 -287 translate
-343 574 moveto 338 574 lineto 338 0 lineto -343 0 lineto closepath clip newpath
gsave
grestore
gsave
grestore
gsave
grestore
gsave
0 285 moveto
16 285 lineto
16 269 lineto
0 269 lineto
9.79685083057902e-16 253 lineto
1.9593701661158e-15 237 lineto
16 237 lineto
16 253 lineto
32 253 lineto
32 237 lineto
48 237 lineto
48 253 lineto
48 269 lineto
32 269 lineto
32 285 lineto
48 285 lineto
64 285 lineto
64 269 lineto
80 269 lineto
80 285 lineto
96 285 lineto
112 285 lineto
112 269 lineto
96 269 lineto
96 253 lineto
112 253 lineto
112 237 lineto
96 237 lineto
80 237 lineto
80 253 lineto
64 253 lineto
64 237 lineto
64 221 lineto
64 205 lineto
80 205 lineto
80 221 lineto
96 221 lineto
112 221 lineto
112 205 lineto
96 205 lineto
96 189 lineto
112 189 lineto
112 173 lineto
1 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
112 173 moveto
96 173 lineto
80 173 lineto
80 189 lineto
64 189 lineto
64 173 lineto
48 173 lineto
32 173 lineto
32 189 lineto
48 189 lineto
48 205 lineto
48 221 lineto
32 221 lineto
32 205 lineto
16 205 lineto
16 221 lineto
-3.5527136788005e-15 221 lineto
-2.5730285957426e-15 205 lineto
-1.5933435126847e-15 189 lineto
16 189 lineto
16 173 lineto
0 173 lineto
9.79685083057902e-16 157 lineto
1.9593701661158e-15 141 lineto
16 141 lineto
16 157 lineto
32 157 lineto
48 157 lineto
48 141 lineto
32 141 lineto
32 125 lineto
48 125 lineto
48 109 lineto
32 109 lineto
16 109 lineto
16 125 lineto
-3.5527136788005e-15 125 lineto
-2.5730285957426e-15 109 lineto
-1.5933435126847e-15 93 lineto
16 93 lineto
16 77 lineto
0 77 lineto
9.79685083057902e-16 61 lineto
1 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
9.79685083057902e-16 61 moveto
1.9593701661158e-15 45 lineto
16 45 lineto
16 61 lineto
32 61 lineto
32 45 lineto
48 45 lineto
48 61 lineto
48 77 lineto
32 77 lineto
32 93 lineto
48 93 lineto
64 93 lineto
80 93 lineto
80 77 lineto
64 77 lineto
64 61 lineto
64 45 lineto
80 45 lineto
80 61 lineto
96 61 lineto
96 45 lineto
112 45 lineto
112 61 lineto
112 77 lineto
96 77 lineto
96 93 lineto
112 93 lineto
112 109 lineto
112 125 lineto
96 125 lineto
96 109 lineto
80 109 lineto
64 109 lineto
64 125 lineto
80 125 lineto
80 141 lineto
64 141 lineto
64 157 lineto
80 157 lineto
96 157 lineto
96 141 lineto
112 141 lineto
1 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
112 141 moveto
112 157 lineto
128 157 lineto
128 141 lineto
144 141 lineto
144 157 lineto
160 157 lineto
176 157 lineto
176 141 lineto
160 141 lineto
160 125 lineto
176 125 lineto
176 109 lineto
160 109 lineto
144 109 lineto
144 125 lineto
128 125 lineto
128 109 lineto
128 93 lineto
144 93 lineto
144 77 lineto
128 77 lineto
128 61 lineto
128 45 lineto
144 45 lineto
144 61 lineto
160 61 lineto
160 45 lineto
176 45 lineto
176 61 lineto
176 77 lineto
160 77 lineto
160 93 lineto
176 93 lineto
192 93 lineto
208 93 lineto
208 77 lineto
192 77 lineto
192 61 lineto
192 45 lineto
208 45 lineto
208 61 lineto
224 61 lineto
1 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
224 61 moveto
224 45 lineto
240 45 lineto
240 61 lineto
240 77 lineto
224 77 lineto
224 93 lineto
240 93 lineto
240 109 lineto
240 125 lineto
224 125 lineto
224 109 lineto
208 109 lineto
192 109 lineto
192 125 lineto
208 125 lineto
208 141 lineto
192 141 lineto
192 157 lineto
208 157 lineto
224 157 lineto
224 141 lineto
240 141 lineto
240 157 lineto
240 173 lineto
224 173 lineto
224 189 lineto
240 189 lineto
240 205 lineto
240 221 lineto
224 221 lineto
224 205 lineto
208 205 lineto
208 221 lineto
192 221 lineto
192 205 lineto
192 189 lineto
208 189 lineto
208 173 lineto
192 173 lineto
176 173 lineto
176 189 lineto
160 189 lineto
1 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
160 189 moveto
160 173 lineto
144 173 lineto
128 173 lineto
128 189 lineto
144 189 lineto
144 205 lineto
128 205 lineto
128 221 lineto
144 221 lineto
160 221 lineto
160 205 lineto
176 205 lineto
176 221 lineto
176 237 lineto
176 253 lineto
160 253 lineto
160 237 lineto
144 237 lineto
128 237 lineto
128 253 lineto
144 253 lineto
144 269 lineto
128 269 lineto
128 285 lineto
144 285 lineto
160 285 lineto
160 269 lineto
176 269 lineto
176 285 lineto
192 285 lineto
208 285 lineto
208 269 lineto
192 269 lineto
192 253 lineto
192 237 lineto
208 237 lineto
208 253 lineto
224 253 lineto
224 237 lineto
240 237 lineto
240 253 lineto
240 269 lineto
1 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
240 269 moveto
224 269 lineto
224 285 lineto
240 285 lineto
1 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
restore showpage
%%Trailer
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
