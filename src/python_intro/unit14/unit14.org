#+TITLE: Python \hfill Unit 14\linebreak \small...für Anfänger
#+AUTHOR: Dr. Günter Kolousek
#+OPTIONS: H:1 toc:nil
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Execushares
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

#+LATEX_HEADER:\usepackage{pgfpages}
# +LATEX_HEADER:\pgfpagesuselayout{2 on 1}[a4paper,border shrink=5mm]
# +LATEX: \mode<handout>{\setbeamercolor{background canvas}{bg=black!5}}
#+LATEX_HEADER:\usepackage{xspace}
#+LATEX: \newcommand{\cpp}{C++\xspace}
#+LATEX: \setminted{escapeinside=´´}

* Bitoperationen - 4
#+BEGIN_SRC python
>>> ~4  # ~x = -(x + 1)
-5
>>> ~-5
4
>>> ~0
-1
>>> ~-1
0
>>> x = int(input("eine ganze zahl: "))
eine ganze zahl: 767
>>> ~~x
767
#+END_SRC

* Bitoperationen - 5
#+BEGIN_SRC python
>>> bin(12)
'0b1100'
>>> 12 << 1
24
>>> bin(24)
'0b11000'
>>> 12 << 2
48
>>> bin(48)
'0b110000'
#+END_SRC

* Bitoperationen - 6
#+BEGIN_SRC python
>>> 12 >> 1
6
>>> bin(6)
'0b110'
>>> 12 >> 2
3
>>> bin(6)
'0b11'
>>> 12 >> 3
1
>>> 12 >> 4
0
>>> 12 >> 5
0
#+END_SRC

* Bitoperationen - 7
#+BEGIN_SRC python
>>> p = 0b0101
>>> bin(1 << 3)
'0b1000'
>>> p = p | (1 << 3)  # setzen eines Bits
>>> bin(p)
'0b1101'
>>> bin(p & (1 << 3))
'0b1000'
>>> bool(p & (1 << 3))  # abfragen eines Bits
True
#+END_SRC

* Bitoperationen - 8
#+BEGIN_SRC python
>>> def mask(p, pos):
...     """Return deletion mask for given position"""
...     return 1 << pos ^ (1 << p.bit_length()) - 1
...
>>> p = 0b1101
>>> bin(mask(p, 0))
'0b1110'
>>> bin(mask(p, 1))
'0b1101'
>>> bin(mask(p, 2))
'0b1011'
>>> bin(mask(p, 3))
'0b111'
#+END_SRC

* Bitoperationen - 9
#+BEGIN_SRC python
>>> bin(p & mask(p, 2))
'0b1101'
>>> p = p & mask(p, 2)  # löschen eines Bits
>>> bin(p)
'0b1001'
>>> p = p & mask(p, 1)
>>> bin(p)
'0b1001'
>>> p = p | (1 << 0)
>>> bin(p)
'0b1001'
#+END_SRC
