

1. Make all fields final. When you define fields as final in Java, you must
   either initialize them at declaration time or in the constructor.

2. Make the class final so that it cannot be overridden. If the class can be
   overridden, its methods’ behaviors can be overridden as well, so your safest
   bet is to disallow subclassing. Notice that this is the strategy used by
   Java’s String class.

3. Provide at least one constructor, and set whatever state it will contain in
   the constructor. If you have no state to set, why do you have an object?
   Static methods on a stateless class would work just as well. Thus, you
   should never have a no-argument constructor for an immutable class .

4. Do not provide any mutating methods other than the constructor (i.e. all
   functions must be side-effect-free).

5. Do not provide a no-argument constructor.

6. Implement hashcode and equals (use your IDE to generate the code). Remember
   to do this for any enclosed value objects too.

7. Not only must you avoid typical JavaBeans-inspired setXXX methods, but you
   must also be careful not to return mutable object references. The fact that
   the object reference is final doesn’t mean that you can’t change what it
   points to. Thus, you need to make sure you defensively copy any object
   references you return from getXXX methods. Be especially wary of
   collections!

