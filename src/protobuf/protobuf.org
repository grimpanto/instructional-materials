#+TITLE: Google Protocol Buffers
#+AUTHOR: Dr. Günter Kolousek
#+DATE: \copy Dr. Günter Kolousek \hspace{12ex} [[http://creativecommons.org/licenses/by-nc-nd/4.0/][Creative Commons Namensnennung - Nicht kommerziell - Keine Bearbeitungen 4.0 International Lizenz]]

#+OPTIONS: H:1 toc:nil
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Execushares
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

#+LATEX_HEADER:\usepackage{pgfpages}
#+LATEX_HEADER:\usepackage{tikz}
#+LATEX_HEADER:\usetikzlibrary{shapes,arrows}
#+LATEX_HEADER:\usetikzlibrary{automata,positioning}
# +LATEX_HEADER:\pgfpagesuselayout{2 on 1}[a4paper,border shrink=5mm]u
# +LATEX: \mode<handout>{\setbeamercolor{background canvas}{bg=black!5}}
#+LATEX_HEADER:\usepackage{xspace}
#+LATEX: \newcommand{\cpp}{C++\xspace}

#+LATEX_HEADER: \newcommand{\N}{\ensuremath{\mathbb{N}}\xspace}
#+LATEX_HEADER: \newcommand{\R}{\ensuremath{\mathbb{R}}\xspace}
#+LATEX_HEADER: \newcommand{\Z}{\ensuremath{\mathbb{Z}}\xspace}
#+LATEX_HEADER: \newcommand{\Q}{\ensuremath{\mathbb{Q}}\xspace}
# +LATEX_HEADER: \renewcommand{\C}{\ensuremath{\mathbb{C}}\xspace}
#+LATEX_HEADER: \renewcommand{\P}{\ensuremath{\mathcal{P}}\xspace}
#+LATEX_HEADER: \newcommand{\sneg}[1]{\ensuremath{\overline{#1}}\xspace}
#+LATEX_HEADER: \renewcommand{\mod}{\mbox{ mod }}

#+LATEX_HEADER: \newcommand{\eps}{\ensuremath{\varepsilon}\xspace}
# +LATEX_HEADER: \newcommand{\sub}[1]{\textsubscript{#1}}
# +LATEX_HEADER: \newcommand{\super}[1]{\textsuperscript{#1}}
#+LATEX_HEADER: \newcommand{\union}{\ensuremath{\cup}}

#+LATEX_HEADER: \newcommand{\sseq}{\ensuremath{\subseteq}\xspace}

#+LATEX_HEADER: \usepackage{textcomp}
#+LATEX_HEADER: \usepackage{ucs}
#+LaTeX_HEADER: \usepackage{float}

#+latex_header: \usepackage{centernot}

# +LaTeX_HEADER: \shorthandoff{"}

#+LATEX_HEADER: \newcommand{\imp}{\ensuremath{\rightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\ar}{\ensuremath{\rightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\bicond}{\ensuremath{\leftrightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\biimp}{\ensuremath{\leftrightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\conj}{\ensuremath{\wedge}\xspace}
#+LATEX_HEADER: \newcommand{\disj}{\ensuremath{\vee}\xspace}
#+LATEX_HEADER: \newcommand{\anti}{\ensuremath{\underline{\vee}}\xspace}
#+LATEX_HEADER: \newcommand{\lnegx}{\ensuremath{\neg}\xspace}
#+LATEX_HEADER: \newcommand{\lequiv}{\ensuremath{\Leftrightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\limp}{\ensuremath{\Rightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\aR}{\ensuremath{\Rightarrow}\xspace}
#+LATEX_HEADER: \newcommand{\lto}{\ensuremath{\leadsto}\xspace}

#+LATEX_HEADER: \renewcommand{\neg}{\ensuremath{\lnot}\xspace}

#+LATEX_HEADER: \newcommand{\eset}{\ensuremath{\emptyset}\xspace}

* Protobuf Buffers
- Mechanismus zum Serialisieren von Daten
- Unabhängig von Plattform
- entwickelt in \cpp
- aber: unabhängig von Programmiersprache
  - Java, =C++=, Python, =C#=, Dart, Go, Objective-C, Ruby, PHP, JavaScript, Go
  - weitere Implementierungen: Julia, Rust, Swift,...
- Basierend auf einem Schema (IDL)
- nicht selbst-beschreibend
  - d.h. ohne IDL...
- Google, aber: open source

* Features
- flexibel
- effizient
- einfach
- neue Felder können leicht hinzugefügt werden

* Einsatz und Alternativen
- Einsatz
  - Microservices
  - (meist) intern
- Alternativen
  - XML
    - kleiner um Faktor 3 bis 10
    - schneller um Faktor 20 bis 100
  - JSON, YAML, 
  - BSON, CBOR, UBJSON, ASN.1,...
  - FlatBuffers, Thrift, MessagePack,...

* Datentypen
\vspace{1em}
- variable Längenkodierung
  - =int32=, =in64=
    - wenn negativ, dann besser: =sint32= bzw. =sint64=
    - nur positiv, dann besser: =uint32= bzw. =uint64=
  - =string=
  - =bytes=
- fixe Länge
  - =float=, =double=
  - nur positiv: =fixed32= bzw. =fixed64=
  - auch negativ: =sfixed32= bzw. =sfixed64=
  - =bool=
- nicht vorhanden, dann default-Wert ("Nullwert")!
- Maps
  - =map<key_type, value_type> map_field = N;=
  - =key_type=: entweder skalar oder =string=!

* Beispiel
\vspace{1.5em}
\footnotesize
#+begin_example
syntax = "proto3";
package tutorial;

message Person {
  string name = 1;  // optional per default
  int32 id = 2;  // also: 
  string email = 3;

  enum PhoneType {
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

  message PhoneNumber {
    string number = 1;
    PhoneType type = 2;
  }

  repeated PhoneNumber phone = 4;
}
#+end_example

* Workflow
a. Definition der Nachrichten (=.proto=-Datei)
b. aus =.proto=-Datei Zugriffscode Code generieren
c. Implementierung
d. Starten

* Definition des Service
\vspace{2em}
=messages.proto=:
#+begin_example
syntax = "proto3";

message Dummy {
  string text = 1;
}
#+end_example

* Zugriffscode generieren
#+begin_src sh
$ protoc --cpp_out=build --proto_path=.\
  messages.proto
...
#+end_src
- erzeugt:
  - =messages.pb.cc=
  - =messages.pb.h=

* Implementierung
\vspace{1em}
\small
#+begin_src cpp
#include <iostream>

#include "messages.pb.h"

using namespace std;

int main() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    Dummy *d = new Dummy;
    d->set_text("Hello World");
    cout << d->text() << endl;
    delete d;
    google::protobuf::ShutdownProtobufLibrary();
}
#+end_src

* Übersetzen & Starten
- Übersetzen: am Besten mittels =meson=
- Starten
  #+begin_src sh
  $ go
  Hello World
  #+end_src

* Length-prefix Framing
#+begin_quote
If you want to write multiple messages to a single file or stream, it is up to
you to keep track of where one message ends and the next begins. The Protocol
Buffer wire format is not self-delimiting, so protocol buffer parsers cannot
determine where a message ends on their own. The easiest way to solve this
problem is to write the size of each message before you write the message
itself. When you read the messages back in, you read the size, then read the
bytes into a separate buffer, then parse from that buffer. (If you want to
avoid copying bytes to a separate buffer, check out the =CodedInputStream= class
(in both C++ and Java) which can be told to limit reads to a certain number of
bytes.)
#+end_quote

https://developers.google.com/protocol-buffers/docs/techniques#streaming
\to Zählmethode...
